//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace CiaranONeill.NPV.Silverlight.NpvServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/CiaranONeill.NPV.Silverlight.Web")]
    public partial class Customer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="NpvServiceReference.NpvService")]
    public interface NpvService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:NpvService/DoWork", ReplyAction="urn:NpvService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        string EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:NpvService/GetRandomData", ReplyAction="urn:NpvService/GetRandomDataResponse")]
        System.IAsyncResult BeginGetRandomData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<double> EndGetRandomData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:NpvService/GetCustomers", ReplyAction="urn:NpvService/GetCustomersResponse")]
        System.IAsyncResult BeginGetCustomers(CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer customer, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer> EndGetCustomers(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface NpvServiceChannel : CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRandomDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRandomDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<double> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<double>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCustomersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCustomersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NpvServiceClient : System.ServiceModel.ClientBase<CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService>, CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRandomDataDelegate;
        
        private EndOperationDelegate onEndGetRandomDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetRandomDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCustomersDelegate;
        
        private EndOperationDelegate onEndGetCustomersDelegate;
        
        private System.Threading.SendOrPostCallback onGetCustomersCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public NpvServiceClient() {
        }
        
        public NpvServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NpvServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NpvServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NpvServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<DoWorkCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetRandomDataCompletedEventArgs> GetRandomDataCompleted;
        
        public event System.EventHandler<GetCustomersCompletedEventArgs> GetCustomersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService.EndDoWork(System.IAsyncResult result) {
            return base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            string retVal = ((CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService)(this)).EndDoWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new DoWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService.BeginGetRandomData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRandomData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<double> CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService.EndGetRandomData(System.IAsyncResult result) {
            return base.Channel.EndGetRandomData(result);
        }
        
        private System.IAsyncResult OnBeginGetRandomData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService)(this)).BeginGetRandomData(callback, asyncState);
        }
        
        private object[] OnEndGetRandomData(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<double> retVal = ((CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService)(this)).EndGetRandomData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRandomDataCompleted(object state) {
            if ((this.GetRandomDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRandomDataCompleted(this, new GetRandomDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRandomDataAsync() {
            this.GetRandomDataAsync(null);
        }
        
        public void GetRandomDataAsync(object userState) {
            if ((this.onBeginGetRandomDataDelegate == null)) {
                this.onBeginGetRandomDataDelegate = new BeginOperationDelegate(this.OnBeginGetRandomData);
            }
            if ((this.onEndGetRandomDataDelegate == null)) {
                this.onEndGetRandomDataDelegate = new EndOperationDelegate(this.OnEndGetRandomData);
            }
            if ((this.onGetRandomDataCompletedDelegate == null)) {
                this.onGetRandomDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRandomDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetRandomDataDelegate, null, this.onEndGetRandomDataDelegate, this.onGetRandomDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService.BeginGetCustomers(CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer customer, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCustomers(customer, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer> CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService.EndGetCustomers(System.IAsyncResult result) {
            return base.Channel.EndGetCustomers(result);
        }
        
        private System.IAsyncResult OnBeginGetCustomers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer customer = ((CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer)(inValues[0]));
            return ((CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService)(this)).BeginGetCustomers(customer, callback, asyncState);
        }
        
        private object[] OnEndGetCustomers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer> retVal = ((CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService)(this)).EndGetCustomers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCustomersCompleted(object state) {
            if ((this.GetCustomersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCustomersCompleted(this, new GetCustomersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCustomersAsync(CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer customer) {
            this.GetCustomersAsync(customer, null);
        }
        
        public void GetCustomersAsync(CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer customer, object userState) {
            if ((this.onBeginGetCustomersDelegate == null)) {
                this.onBeginGetCustomersDelegate = new BeginOperationDelegate(this.OnBeginGetCustomers);
            }
            if ((this.onEndGetCustomersDelegate == null)) {
                this.onEndGetCustomersDelegate = new EndOperationDelegate(this.OnEndGetCustomers);
            }
            if ((this.onGetCustomersCompletedDelegate == null)) {
                this.onGetCustomersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCustomersCompleted);
            }
            base.InvokeAsync(this.onBeginGetCustomersDelegate, new object[] {
                        customer}, this.onEndGetCustomersDelegate, this.onGetCustomersCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService CreateChannel() {
            return new NpvServiceClientChannel(this);
        }
        
        private class NpvServiceClientChannel : ChannelBase<CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService>, CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService {
            
            public NpvServiceClientChannel(System.ServiceModel.ClientBase<CiaranONeill.NPV.Silverlight.NpvServiceReference.NpvService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DoWork", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRandomData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetRandomData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<double> EndGetRandomData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<double> _result = ((System.Collections.ObjectModel.ObservableCollection<double>)(base.EndInvoke("GetRandomData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCustomers(CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer customer, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = customer;
                System.IAsyncResult _result = base.BeginInvoke("GetCustomers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer> EndGetCustomers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer> _result = ((System.Collections.ObjectModel.ObservableCollection<CiaranONeill.NPV.Silverlight.NpvServiceReference.Customer>)(base.EndInvoke("GetCustomers", _args, result)));
                return _result;
            }
        }
    }
}
